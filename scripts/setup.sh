#!/bin/bash

# WorkerNet Portal Setup Script
# This script sets up the development environment

set -e

echo "üöÄ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WorkerNet Portal..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[–ò–ù–§–û]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[–í–ù–ò–ú–ê–ù–ò–ï]${NC} $1"
}

print_error() {
    echo -e "${RED}[–û–®–ò–ë–ö–ê]${NC} $1"
}

# Check if running on supported OS
check_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        OS="windows"
    else
        print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OSTYPE"
        exit 1
    fi
    print_status "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS"
}

# Check if required tools are installed
check_dependencies() {
    print_status "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."
        exit 1
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose."
        exit 1
    fi
    
    # Check Git
    if ! command -v git &> /dev/null; then
        print_error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git."
        exit 1
    fi
    
    print_status "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úì"
}

# Create necessary directories
create_directories() {
    print_status "–°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    
    mkdir -p logs
    mkdir -p uploads
    mkdir -p data/postgres
    mkdir -p data/redis
    mkdir -p data/elasticsearch
    mkdir -p data/prometheus
    mkdir -p data/grafana
    
    print_status "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã ‚úì"
}

# Copy environment files
setup_environment() {
    print_status "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ ! -f .env ]; then
        cp .env.example .env
        print_warning "–°–æ–∑–¥–∞–Ω .env –∏–∑ .env.example"
        print_warning "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –ø–æ–¥ –≤–∞—à—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    else
        print_status ".env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚úì"
    fi
    
    if [ ! -f docker-compose.override.yml ]; then
        cp docker-compose.override.yml.example docker-compose.override.yml
        print_warning "–°–æ–∑–¥–∞–Ω docker-compose.override.yml –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"
    else
        print_status "docker-compose.override.yml —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚úì"
    fi
}

# Generate secrets
generate_secrets() {
    print_status "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç—ã..."
    
    # Generate random secrets if not set
    if ! grep -q "SECRET_KEY=" .env || grep -q "your-secret-key-here" .env; then
        SECRET_KEY=$(openssl rand -base64 32)
        sed -i.bak "s/SECRET_KEY=.*/SECRET_KEY=$SECRET_KEY/" .env
        print_status "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω SECRET_KEY"
    fi
    
    if ! grep -q "JWT_SECRET=" .env || grep -q "your-jwt-secret-here" .env; then
        JWT_SECRET=$(openssl rand -base64 32)
        sed -i.bak "s/JWT_SECRET=.*/JWT_SECRET=$JWT_SECRET/" .env
        print_status "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω JWT_SECRET"
    fi
    
    if ! grep -q "ENCRYPTION_KEY=" .env || grep -q "your-encryption-key-here" .env; then
        ENCRYPTION_KEY=$(openssl rand -base64 32)
        sed -i.bak "s/ENCRYPTION_KEY=.*/ENCRYPTION_KEY=$ENCRYPTION_KEY/" .env
        print_status "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ENCRYPTION_KEY"
    fi
    
    # Clean up backup files
    rm -f .env.bak
}

# Build Docker images
build_images() {
    print_status "–°–æ–±–∏—Ä–∞–µ–º Docker-–æ–±—Ä–∞–∑—ã..."
    
    docker-compose build --no-cache
    
    print_status "Docker-–æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã ‚úì"
}

# Start services
start_services() {
    print_status "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
    
    docker-compose up -d
    
    print_status "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã ‚úì"
}

# Wait for services to be ready
wait_for_services() {
    print_status "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # Wait for PostgreSQL
    print_status "–û–∂–∏–¥–∞–Ω–∏–µ PostgreSQL..."
    until docker-compose exec -T postgres pg_isready -U workernet -d workernet; do
        sleep 2
    done
    print_status "PostgreSQL –≥–æ—Ç–æ–≤ ‚úì"
    
    # Wait for Redis
    print_status "–û–∂–∏–¥–∞–Ω–∏–µ Redis..."
    until docker-compose exec -T redis redis-cli ping; do
        sleep 2
    done
    print_status "Redis –≥–æ—Ç–æ–≤ ‚úì"
    
    # Wait for Elasticsearch
    print_status "–û–∂–∏–¥–∞–Ω–∏–µ Elasticsearch..."
    until curl -f http://localhost:9200/_cluster/health > /dev/null 2>&1; do
        sleep 2
    done
    print_status "Elasticsearch –≥–æ—Ç–æ–≤ ‚úì"
    
    # Wait for Backend
    print_status "–û–∂–∏–¥–∞–Ω–∏–µ Backend API..."
    until curl -f http://localhost:8000/api/system/health > /dev/null 2>&1; do
        sleep 2
    done
    print_status "Backend API –≥–æ—Ç–æ–≤ ‚úì"
}

# Run database migrations
run_migrations() {
    print_status "–í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    docker-compose exec backend python manage.py migrate --fake-initial
    
    print_status "–ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚úì"
}

# Create superuser
create_superuser() {
    print_status "–°–æ–∑–¥–∞—ë–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    
    # Check if superuser already exists
    if docker-compose exec -T backend python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); print('Superuser exists' if User.objects.filter(is_superuser=True).exists() else 'No superuser')" | grep -q "Superuser exists"; then
        print_status "–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚úì"
    else
        print_warning "–°–æ–∑–¥–∞–π—Ç–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é:"
        echo "docker-compose exec backend python manage.py createsuperuser"
    fi
}

# Load initial data
load_initial_data() {
    print_status "–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ..."
    
    # Check if initial data exists
    if [ -f "fixtures/initial_data.json" ]; then
        docker-compose exec backend python manage.py loaddata fixtures/initial_data.json
        print_status "–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úì"
    else
        print_warning "–§–∞–π–ª –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..."
    fi
}

# Create search indexes
create_search_indexes() {
    print_status "–°–æ–∑–¥–∞—ë–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã..."
    
    docker-compose exec backend python manage.py search_index --rebuild
    
    print_status "–ü–æ–∏—Å–∫–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã ‚úì"
}

# Show service URLs
show_urls() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ"
    echo ""
    echo "–ê–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo "  Frontend:      http://localhost:3000"
    echo "  Backend API:   http://localhost:8000"
    echo "  API Docs:      http://localhost:8000/api/docs"
    echo "  Admin Panel:   http://localhost:8000/admin"
    echo "  Grafana:       http://localhost:3001 (admin/admin)"
    echo "  Prometheus:    http://localhost:9090"
    echo "  Celery Flower: http://localhost:5555"
    echo "  Mailhog:       http://localhost:8025"
    echo ""
    echo "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  –õ–æ–≥–∏:          docker-compose logs -f [service]"
    echo "  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:    docker-compose down"
    echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:    docker-compose restart [service]"
    echo "  Shell:         docker-compose exec backend python manage.py shell"
    echo ""
}

# Main execution
main() {
    check_os
    check_dependencies
    # Fix script permissions and normalize line endings (idempotent)
    if [ -f "$(dirname "$0")/fix-perms.sh" ]; then
        bash "$(dirname "$0")/fix-perms.sh" || true
    fi
    create_directories
    setup_environment
    generate_secrets
    build_images
    start_services
    wait_for_services
    run_migrations
    create_superuser
    load_initial_data
    create_search_indexes
    show_urls
}

# Run main function
main "$@"
