#!/bin/bash

# Check Dependencies Script for WorkerNet Portal
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

set -e

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π WorkerNet Portal..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${2}${1}${NC}"
}

# Check if we're in the right directory
if [ ! -f "requirements.txt" ]; then
    print_status "‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞." "$RED"
    exit 1
fi

# Backend dependencies check
print_status "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." "$BLUE"

# Check if virtual environment is activated
if [ -z "$VIRTUAL_ENV" ]; then
    print_status "‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º..." "$YELLOW"
    if [ -f "venv/bin/activate" ]; then
        source venv/bin/activate
    elif [ -f "venv/Scripts/activate" ]; then
        source venv/Scripts/activate
    else
        print_status "‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: python -m venv venv" "$RED"
        exit 1
    fi
fi

# Install pip-audit for security checking
echo "üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏..."
pip install --quiet pip-audit safety

# Check for outdated packages
print_status "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤..." "$BLUE"
pip list --outdated --format=freeze | head -20

# Security audit with pip-audit
print_status "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å pip-audit..." "$BLUE"
pip-audit --desc --fix-dry-run || print_status "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö" "$YELLOW"

# Security audit with safety
print_status "üõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å safety..." "$BLUE"
safety check --json --output safety-report.json || print_status "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö" "$YELLOW"

# Check frontend dependencies
if [ -f "frontend/package.json" ]; then
    print_status "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." "$BLUE"
    cd frontend
    
    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        print_status "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." "$BLUE"
        npm install
    fi
    
    # Audit npm packages
    print_status "üîí –ê—É–¥–∏—Ç npm –ø–∞–∫–µ—Ç–æ–≤..." "$BLUE"
    npm audit --audit-level=moderate || print_status "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ npm –ø–∞–∫–µ—Ç–∞—Ö" "$YELLOW"
    
    # Check for outdated npm packages
    print_status "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö npm –ø–∞–∫–µ—Ç–æ–≤..." "$BLUE"
    npm outdated || true
    
    cd ..
fi

# Check Docker configuration
if [ -f "docker-compose.yml" ]; then
    print_status "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." "$BLUE"
    
    # Check if docker-compose is available
    if command -v docker-compose &> /dev/null; then
        docker-compose config --quiet && print_status "‚úÖ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞" "$GREEN" || print_status "‚ùå –û—à–∏–±–∫–∏ –≤ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏" "$RED"
    else
        print_status "‚ö†Ô∏è  docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω" "$YELLOW"
    fi
fi

# Check for common security issues in settings
print_status "üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..." "$BLUE"

if [ -f "backend/config/settings.py" ]; then
    # Check for DEBUG=True in production
    if grep -q "DEBUG.*=.*True" backend/config/settings.py; then
        print_status "‚ö†Ô∏è  DEBUG=True –Ω–∞–π–¥–µ–Ω –≤ settings.py - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —ç—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ" "$YELLOW"
    fi
    
    # Check for SECRET_KEY exposure
    if grep -q "SECRET_KEY.*=.*['\"].*['\"]" backend/config/settings.py; then
        print_status "‚ö†Ô∏è  SECRET_KEY –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω –≤ settings.py" "$YELLOW"
    fi
    
    # Check for ALLOWED_HOSTS
    if grep -q "ALLOWED_HOSTS.*=.*\[\]" backend/config/settings.py; then
        print_status "‚ö†Ô∏è  ALLOWED_HOSTS –ø—É—Å—Ç - —ç—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞" "$YELLOW"
    fi
fi

# Generate dependency report
print_status "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö..." "$BLUE"

cat > dependency-report.md << EOF
# –û—Ç—á—ë—Ç –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö WorkerNet Portal

## –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
$(date)

## Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
\`\`\`
$(pip list --format=freeze | head -50)
\`\`\`

## –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ Python –ø–∞–∫–µ—Ç—ã
\`\`\`
$(pip list --outdated --format=freeze 2>/dev/null | head -20 || echo "–ù–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤")
\`\`\`

EOF

if [ -f "frontend/package.json" ]; then
    cat >> dependency-report.md << EOF
## Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
\`\`\`
$(cd frontend && npm list --depth=0 2>/dev/null | head -30 || echo "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞")
\`\`\`

EOF
fi

print_status "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" "$GREEN"
print_status "üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ dependency-report.md" "$BLUE"

if [ -f "safety-report.json" ]; then
    print_status "üõ°Ô∏è  –û—Ç—á—ë—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ safety-report.json" "$BLUE"
fi

print_status "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" "$BLUE"
echo "1. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
echo "2. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
echo "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dependabot –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
echo "4. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ dev/staging —Å—Ä–µ–¥–µ"
echo "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"
