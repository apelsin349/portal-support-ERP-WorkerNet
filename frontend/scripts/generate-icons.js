const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Sharp
let sharp;
try {
  sharp = require('sharp');
  console.log('‚úÖ Sharp –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è');
} catch (error) {
  console.log('‚ö†Ô∏è  Sharp –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è');
  console.log('üí° –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install sharp');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫–∏
function needsIconGeneration() {
  const iconDir = path.join(__dirname, '../public/icons');
  const hashFile = path.join(iconDir, '.icons_hash');
  const sourceIcon = path.join(__dirname, '../public/icons/icon.svg');
  
  // –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∫–æ–Ω–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω—É–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
  if (!fs.existsSync(iconDir)) {
    return true;
  }
  
  // –ï—Å–ª–∏ —Ö–µ—à-—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω—É–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
  if (!fs.existsSync(hashFile)) {
    return true;
  }
  
  // –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
  if (!fs.existsSync(sourceIcon)) {
    return true;
  }
  
  try {
    // –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ö–µ—à
    const savedHash = fs.readFileSync(hashFile, 'utf8').trim();
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ö–µ—à –∏—Å—Ö–æ–¥–Ω–æ–π –∏–∫–æ–Ω–∫–∏
    const sourceIconData = fs.readFileSync(sourceIcon);
    const currentHash = crypto.createHash('sha256').update(sourceIconData).digest('hex');
    
    // –ï—Å–ª–∏ —Ö–µ—à–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –Ω—É–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
    return savedHash !== currentHash;
  } catch (error) {
    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
    return true;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–∞
function saveIconHash() {
  const iconDir = path.join(__dirname, '../public/icons');
  const hashFile = path.join(iconDir, '.icons_hash');
  const sourceIcon = path.join(__dirname, '../public/icons/icon.svg');
  
  try {
    if (fs.existsSync(sourceIcon)) {
      const sourceIconData = fs.readFileSync(sourceIcon);
      const hash = crypto.createHash('sha256').update(sourceIconData).digest('hex');
      fs.writeFileSync(hashFile, hash);
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–∞
  }
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ PNG –∏–∫–æ–Ω–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
const sizes = [72, 96, 128, 144, 152, 192, 384, 512];
const iconDir = path.join(__dirname, '../public/icons');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∫–æ–Ω–æ–∫
if (!fs.existsSync(iconDir)) {
  fs.mkdirSync(iconDir, { recursive: true });
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏–∫–æ–Ω–∫–∏ –≤ –≤–∏–¥–µ base64 PNG
const createIcon = (size) => {
  // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫
  const canvas = `
    <svg width="${size}" height="${size}" viewBox="0 0 ${size} ${size}" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" style="stop-color:#1976d2;stop-opacity:1" />
          <stop offset="100%" style="stop-color:#42a5f5;stop-opacity:1" />
        </linearGradient>
      </defs>
      
      <!-- –§–æ–Ω -->
      <rect width="${size}" height="${size}" rx="${size * 0.125}" fill="url(#gradient)"/>
      
      <!-- –ò–∫–æ–Ω–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ -->
      <g transform="translate(${size * 0.25}, ${size * 0.25})">
        <!-- –ì–æ–ª–æ–≤–∞ -->
        <circle cx="${size * 0.25}" cy="${size * 0.1875}" r="${size * 0.0625}" fill="white" opacity="0.9"/>
        
        <!-- –¢–µ–ª–æ -->
        <rect x="${size * 0.1875}" y="${size * 0.25}" width="${size * 0.125}" height="${size * 0.15625}" rx="${size * 0.015625}" fill="white" opacity="0.9"/>
        
        <!-- –†—É–∫–∏ -->
        <rect x="${size * 0.15625}" y="${size * 0.2734375}" width="${size * 0.03125}" height="${size * 0.078125}" rx="${size * 0.015625}" fill="white" opacity="0.9"/>
        <rect x="${size * 0.34375}" y="${size * 0.2734375}" width="${size * 0.03125}" height="${size * 0.078125}" rx="${size * 0.015625}" fill="white" opacity="0.9"/>
        
        <!-- –ù–æ–≥–∏ -->
        <rect x="${size * 0.2109375}" y="${size * 0.40625}" width="${size * 0.03125}" height="${size * 0.0625}" rx="${size * 0.015625}" fill="white" opacity="0.9"/>
        <rect x="${size * 0.2578125}" y="${size * 0.40625}" width="${size * 0.03125}" height="${size * 0.0625}" rx="${size * 0.015625}" fill="white" opacity="0.9"/>
        
        <!-- –ó–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ -->
        <text x="${size * 0.25}" y="${size * 0.21484375}" text-anchor="middle" font-family="Arial, sans-serif" font-size="${size * 0.046875}" font-weight="bold" fill="#1976d2">?</text>
      </g>
    </svg>
  `;
  
  return canvas;
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ PNG —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Sharp
async function svgToPng(svgContent, size, outputPath) {
  if (sharp) {
    try {
      await sharp(Buffer.from(svgContent))
        .resize(size, size, {
          fit: 'contain',
          background: { r: 255, g: 255, b: 255, alpha: 1 }
        })
        .png({ quality: 90 })
        .toFile(outputPath);
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ PNG –∏–∫–æ–Ω–∫–∞: ${path.basename(outputPath)} (${size}x${size})`);
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PNG ${outputPath}: ${error.message}`);
      return false;
    }
  } else {
    // Fallback: —Å–æ–∑–¥–∞–µ–º SVG —Ñ–∞–π–ª
    const svgFilename = outputPath.replace('.png', '.svg');
    fs.writeFileSync(svgFilename, svgContent);
    console.log(`üì± –°–æ–∑–¥–∞–Ω–∞ SVG –∏–∫–æ–Ω–∫–∞: ${path.basename(svgFilename)} (${size}x${size})`);
    return true;
  }
}

// –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
async function generateIcons() {
  let successCount = 0;
  const totalCount = sizes.length;
  
  for (const size of sizes) {
    const iconContent = createIcon(size);
    const filename = `icon-${size}x${size}.png`;
    const filepath = path.join(iconDir, filename);
    
    if (await svgToPng(iconContent, size, filepath)) {
      successCount++;
    }
  }
  
  console.log(`\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount}/${totalCount} –∏–∫–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω–æ`);
  return successCount === totalCount;
}

// –°–æ–∑–¥–∞–µ–º favicon –∏ apple-touch-icon
async function generateSpecialIcons() {
  // Favicon
  const faviconContent = createIcon(32);
  const faviconPath = path.join(iconDir, 'favicon.png');
  await svgToPng(faviconContent, 32, faviconPath);
  
  // Apple Touch Icon
  const appleTouchIcon = createIcon(180);
  const appleTouchPath = path.join(iconDir, 'apple-touch-icon.png');
  await svgToPng(appleTouchIcon, 180, appleTouchPath);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫–∏
  if (!needsIconGeneration()) {
    console.log('‚úÖ –ò–∫–æ–Ω–∫–∏ PWA –∞–∫—Ç—É–∞–ª—å–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é');
    return;
  }
  
  console.log('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ PWA...\n');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
  const mainSuccess = await generateIcons();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
  await generateSpecialIcons();
  
  if (mainSuccess) {
    console.log('\n‚úÖ –í—Å–µ –∏–∫–æ–Ω–∫–∏ PWA —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    if (sharp) {
      console.log('üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å Sharp');
    } else {
      console.log('üí° –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install sharp');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    saveIconHash();
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∫–æ–Ω–∫–∏ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');
  }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
if (require.main === module) {
  main().catch(error => {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  });
}

module.exports = { generateIcons, generateSpecialIcons, svgToPng };
