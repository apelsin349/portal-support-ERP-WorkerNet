#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Sharp –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫
const ICON_DEPENDENCIES = [
  'sharp@^0.32.6',
  'jimp@^0.22.10',
  'svg2png@^4.1.1'
];

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
const OPTIONAL_DEPENDENCIES = [
  'puppeteer@^21.5.2',
  'ico-convert@^1.0.0'
];

class IconDependenciesInstaller {
  constructor(options = {}) {
    this.verbose = options.verbose || false;
    this.installOptional = options.installOptional || false;
    this.packageManager = this.detectPackageManager();
  }
  
  log(message) {
    if (this.verbose) {
      console.log(message);
    }
  }
  
  error(message) {
    console.error(`‚ùå ${message}`);
  }
  
  success(message) {
    console.log(`‚úÖ ${message}`);
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤
  detectPackageManager() {
    if (fs.existsSync('package-lock.json')) {
      return 'npm';
    } else if (fs.existsSync('yarn.lock')) {
      return 'yarn';
    } else if (fs.existsSync('pnpm-lock.yaml')) {
      return 'pnpm';
    } else {
      return 'npm'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  isDependencyInstalled(dependency) {
    const packageName = dependency.split('@')[0];
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    
    if (!fs.existsSync(packageJsonPath)) {
      return false;
    }
    
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const allDeps = {
      ...packageJson.dependencies,
      ...packageJson.devDependencies
    };
    
    return packageName in allDeps;
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  installDependency(dependency) {
    try {
      const packageName = dependency.split('@')[0];
      
      if (this.isDependencyInstalled(packageName)) {
        this.log(`üì¶ ${packageName} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        return true;
      }
      
      this.log(`üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${dependency}...`);
      
      let command;
      switch (this.packageManager) {
        case 'yarn':
          command = `yarn add ${dependency} --dev`;
          break;
        case 'pnpm':
          command = `pnpm add ${dependency} --save-dev`;
          break;
        default:
          command = `npm install ${dependency} --save-dev`;
      }
      
      execSync(command, { 
        stdio: this.verbose ? 'inherit' : 'pipe',
        cwd: process.cwd()
      });
      
      this.success(`${packageName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      return true;
    } catch (error) {
      this.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${dependency}: ${error.message}`);
      return false;
    }
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  async installMainDependencies() {
    console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫...\n');
    
    let successCount = 0;
    const totalCount = ICON_DEPENDENCIES.length;
    
    for (const dependency of ICON_DEPENDENCIES) {
      if (this.installDependency(dependency)) {
        successCount++;
      }
    }
    
    console.log(`\nüìä –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${successCount}/${totalCount} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`);
    return successCount === totalCount;
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  async installOptionalDependencies() {
    if (!this.installOptional) {
      this.log('‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
      return true;
    }
    
    console.log('\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...\n');
    
    let successCount = 0;
    const totalCount = OPTIONAL_DEPENDENCIES.length;
    
    for (const dependency of OPTIONAL_DEPENDENCIES) {
      if (this.installDependency(dependency)) {
        successCount++;
      }
    }
    
    console.log(`\nüìä –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${successCount}/${totalCount} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`);
    return successCount === totalCount;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Sharp
  checkSystemDependencies() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    
    const platform = process.platform;
    const arch = process.arch;
    
    console.log(`üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform} ${arch}`);
    
    // Sharp —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    if (platform === 'linux') {
      console.log('üêß Linux: Sharp –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –∫–æ—Ä–æ–±–∫–∏');
    } else if (platform === 'darwin') {
      console.log('üçé macOS: Sharp –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –∫–æ—Ä–æ–±–∫–∏');
    } else if (platform === 'win32') {
      console.log('ü™ü Windows: Sharp –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –∫–æ—Ä–æ–±–∫–∏');
    }
    
    return true;
  }
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  async testDependencies() {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...\n');
    
    const tests = [
      {
        name: 'Sharp',
        test: () => {
          const sharp = require('sharp');
          return sharp.versions;
        }
      },
      {
        name: 'Jimp',
        test: () => {
          const Jimp = require('jimp');
          return Jimp.version;
        }
      }
    ];
    
    let successCount = 0;
    
    for (const test of tests) {
      try {
        const result = test.test();
        this.success(`${test.name} —Ä–∞–±–æ—Ç–∞–µ—Ç: ${JSON.stringify(result)}`);
        successCount++;
      } catch (error) {
        this.error(`${test.name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${error.message}`);
      }
    }
    
    console.log(`\nüìä –¢–µ—Å—Ç—ã: ${successCount}/${tests.length} –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);
    return successCount === tests.length;
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ
  createInstallationReport() {
    const reportPath = path.join(process.cwd(), 'icon-deps-report.json');
    const report = {
      installed: new Date().toISOString(),
      packageManager: this.packageManager,
      platform: process.platform,
      arch: process.arch,
      dependencies: {
        main: ICON_DEPENDENCIES,
        optional: OPTIONAL_DEPENDENCIES
      },
      installedDeps: []
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for (const dep of [...ICON_DEPENDENCIES, ...OPTIONAL_DEPENDENCIES]) {
      const packageName = dep.split('@')[0];
      if (this.isDependencyInstalled(packageName)) {
        report.installedDeps.push(packageName);
      }
    }
    
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    this.log(`üìä –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportPath}`);
  }
  
  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  async install() {
    console.log('üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫ PWA...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    this.checkSystemDependencies();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const mainSuccess = await this.installMainDependencies();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const optionalSuccess = await this.installOptionalDependencies();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const testSuccess = await this.testDependencies();
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    this.createInstallationReport();
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (mainSuccess && testSuccess) {
      this.success('\nüéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run generate-icons');
      console.log('2. –ò–ª–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: npm run generate-icons-advanced');
      console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –≤ public/icons/');
      return true;
    } else {
      this.error('\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏');
      console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
      console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Node.js 18+');
      console.log('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à: npm cache clean --force');
      return false;
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2);
  const options = {
    verbose: args.includes('--verbose') || args.includes('-v'),
    installOptional: args.includes('--optional') || args.includes('-o')
  };
  
  // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '--help':
      case '-h':
        console.log(`
üì¶ –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫ PWA

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node install-icon-deps.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  -v, --verbose        –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
  -o, --optional       –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  -h, --help           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node install-icon-deps.js
  node install-icon-deps.js --verbose --optional
        `);
        process.exit(0);
        break;
    }
  }
  
  try {
    const installer = new IconDependenciesInstaller(options);
    const success = await installer.install();
    process.exit(success ? 0 : 1);
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = IconDependenciesInstaller;
