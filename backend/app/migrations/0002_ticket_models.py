# Generated by Django 4.2.7 on 2024-01-01 00:01

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0001_initial'),
    ]

    operations = [
        # Tag model (safe create if not exists to avoid conflicts with pre-existing table)
        migrations.RunSQL(
            sql=(
                """
                CREATE TABLE IF NOT EXISTS tags (
                    id BIGSERIAL PRIMARY KEY,
                    name VARCHAR(50) UNIQUE NOT NULL,
                    color VARCHAR(7) NOT NULL DEFAULT '#1976d2',
                    description TEXT NOT NULL DEFAULT '',
                    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
                );
                """
            ),
            reverse_sql=(
                """
                DROP TABLE IF EXISTS tags;
                """
            ),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name='Tag',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
                        ('color', models.CharField(default='#1976d2', max_length=7, verbose_name='Цвет')),
                        ('description', models.TextField(blank=True, verbose_name='Описание')),
                        ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                    ],
                    options={
                        'verbose_name': 'Тег',
                        'verbose_name_plural': 'Теги',
                        'db_table': 'tags',
                        'ordering': ['name'],
                    },
                ),
            ],
            database_operations=[],
        ),
        # Ticket model (safe create)
        migrations.RunSQL(
            sql=(
                """
                CREATE TABLE IF NOT EXISTS tickets (
                    id BIGSERIAL PRIMARY KEY,
                    ticket_id VARCHAR(20) UNIQUE NOT NULL,
                    title VARCHAR(255) NOT NULL,
                    description TEXT NOT NULL,
                    priority VARCHAR(20) NOT NULL DEFAULT 'medium',
                    status VARCHAR(20) NOT NULL DEFAULT 'open',
                    category VARCHAR(20) NOT NULL DEFAULT 'general',
                    sla_hours INTEGER NOT NULL DEFAULT 24,
                    due_date TIMESTAMPTZ,
                    resolved_at TIMESTAMPTZ,
                    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                    custom_fields JSONB NOT NULL DEFAULT '{}'
                );
                """
            ),
            reverse_sql=(
                """
                DROP TABLE IF EXISTS tickets;
                """
            ),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name='Ticket',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('ticket_id', models.CharField(max_length=20, unique=True, verbose_name='ID тикета')),
                        ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                        ('description', models.TextField(verbose_name='Описание')),
                        ('priority', models.CharField(choices=[('low', 'Низкий'), ('medium', 'Средний'), ('high', 'Высокий'), ('urgent', 'Срочный'), ('critical', 'Критический')], default='medium', max_length=20, verbose_name='Приоритет')),
                        ('status', models.CharField(choices=[('open', 'Открыт'), ('in_progress', 'В работе'), ('pending', 'Ожидание'), ('resolved', 'Решён'), ('closed', 'Закрыт'), ('cancelled', 'Отменён')], default='open', max_length=20, verbose_name='Статус')),
                        ('category', models.CharField(choices=[('technical', 'Техническая'), ('billing', 'Биллинг'), ('general', 'Общая'), ('bug_report', 'Баг'), ('feature_request', 'Запрос фичи'), ('other', 'Другое')], default='general', max_length=20, verbose_name='Категория')),
                        ('sla_hours', models.IntegerField(default=24, verbose_name='SLA (часы)')),
                        ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='Крайний срок')),
                        ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Время решения')),
                        ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                        ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                        ('custom_fields', models.JSONField(default=dict, verbose_name='Пользовательские поля')),
                        ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to='app.user', verbose_name='Назначен')),
                        ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tickets', to='app.user', verbose_name='Автор')),
                        ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='app.tenant', verbose_name='Арендатор')),
                    ],
                    options={
                        'verbose_name': 'Тикет',
                        'verbose_name_plural': 'Тикеты',
                        'db_table': 'tickets',
                        'ordering': ['-created_at'],
                    },
                ),
            ],
            database_operations=[],
        ),
        # TicketComment model
        migrations.CreateModel(
            name='TicketComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Содержимое')),
                ('is_internal', models.BooleanField(default=False, verbose_name='Внутренний')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_comments', to='app.user', verbose_name='Автор')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='app.ticket', verbose_name='Тикет')),
            ],
            options={
                'verbose_name': 'Комментарий к тикету',
                'verbose_name_plural': 'Комментарии к тикету',
                'db_table': 'ticket_comments',
                'ordering': ['created_at'],
            },
        ),
        # TicketAttachment model
        migrations.CreateModel(
            name='TicketAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='tickets/attachments/', verbose_name='Файл')),
                ('filename', models.CharField(max_length=255, verbose_name='Имя файла')),
                ('file_size', models.BigIntegerField(verbose_name='Размер файла')),
                ('mime_type', models.CharField(max_length=100, verbose_name='MIME-тип')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='app.ticket', verbose_name='Тикет')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_attachments', to='app.user', verbose_name='Загрузил')),
            ],
            options={
                'verbose_name': 'Вложение тикета',
                'verbose_name_plural': 'Вложения тикетов',
                'db_table': 'ticket_attachments',
            },
        ),
        # SLA model
        migrations.CreateModel(
            name='SLA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('response_time', models.IntegerField(verbose_name='Время ответа (часы)')),
                ('resolution_time', models.IntegerField(verbose_name='Время решения (часы)')),
                ('priority', models.CharField(choices=[('low', 'Низкий'), ('medium', 'Средний'), ('high', 'Высокий'), ('urgent', 'Срочный'), ('critical', 'Критический')], max_length=20, verbose_name='Приоритет')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slas', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'SLA',
                'verbose_name_plural': 'SLA',
                'db_table': 'slas',
            },
        ),
        # TicketSLA model
        migrations.CreateModel(
            name='TicketSLA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_response_at', models.DateTimeField(blank=True, null=True, verbose_name='Время первого ответа')),
                ('resolution_at', models.DateTimeField(blank=True, null=True, verbose_name='Время решения')),
                ('is_breached', models.BooleanField(default=False, verbose_name='SLA нарушен')),
                ('breach_reason', models.TextField(blank=True, verbose_name='Причина нарушения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('sla', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_slas', to='app.sla', verbose_name='SLA')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sla_tracking', to='app.ticket', verbose_name='Ticket')),
            ],
            options={
                'verbose_name': 'SLA тикета',
                'verbose_name_plural': 'SLA тикетов',
                'db_table': 'ticket_slas',
            },
        ),
        # Many-to-many relationships
        migrations.AddField(
            model_name='ticket',
            name='tags',
            field=models.ManyToManyField(blank=True, to='app.tag', verbose_name='Теги'),
        ),
        # Constraints
        migrations.AddConstraint(
            model_name='sla',
            constraint=models.UniqueConstraint(fields=('tenant', 'priority'), name='unique_sla_per_tenant_priority'),
        ),
    ]
