# Generated by Django 4.2.16 on 2025-09-19 18:30

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='Имя пользователя')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Фамилия')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Сотрудник')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Дата регистрации')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='users/avatars/', verbose_name='Аватар')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='Отдел')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='Должность')),
                ('preferences', models.JSONField(default=dict, verbose_name='Предпочтения')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Верифицирован')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP последнего входа')),
                ('reset_token', models.CharField(blank=True, max_length=32, null=True, verbose_name='Токен сброса')),
                ('reset_token_expires', models.DateTimeField(blank=True, null=True, verbose_name='Истечение токена')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='ABTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('active', 'Активен'), ('paused', 'Приостановлен'), ('completed', 'Завершен'), ('cancelled', 'Отменен')], default='draft', max_length=20, verbose_name='Статус')),
                ('traffic_allocation', models.PositiveIntegerField(default=50, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Распределение трафика (%)')),
                ('start_date', models.DateTimeField(verbose_name='Дата начала')),
                ('end_date', models.DateTimeField(verbose_name='Дата окончания')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_ab_tests', to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
            ],
            options={
                'verbose_name': 'A/B Тест',
                'verbose_name_plural': 'A/B Тесты',
                'db_table': 'ab_tests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AutomationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('rule_type', models.CharField(choices=[('assignment', 'Назначение'), ('escalation', 'Эскалация'), ('notification', 'Уведомление'), ('status_change', 'Изменение статуса'), ('response', 'Автоответ'), ('tagging', 'Тегирование'), ('routing', 'Маршрутизация')], max_length=20, verbose_name='Тип правила')),
                ('trigger_type', models.CharField(choices=[('ticket_created', 'Тикет создан'), ('ticket_updated', 'Тикет обновлен'), ('comment_added', 'Добавлен комментарий'), ('status_changed', 'Статус изменен'), ('priority_changed', 'Приоритет изменен'), ('sla_breach', 'Нарушение SLA'), ('time_based', 'По времени')], max_length=20, verbose_name='Тип триггера')),
                ('conditions', models.JSONField(default=dict, verbose_name='Условия')),
                ('actions', models.JSONField(default=dict, verbose_name='Действия')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активно')),
                ('priority', models.PositiveIntegerField(default=0, verbose_name='Приоритет')),
                ('execution_count', models.PositiveIntegerField(default=0, verbose_name='Количество выполнений')),
                ('last_executed_at', models.DateTimeField(blank=True, null=True, verbose_name='Последнее выполнение')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_automation_rules', to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
            ],
            options={
                'verbose_name': 'Правило автоматизации',
                'verbose_name_plural': 'Правила автоматизации',
                'db_table': 'automation_rules',
                'ordering': ['priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('incident_id', models.CharField(max_length=20, unique=True, verbose_name='ID инцидента')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('description', models.TextField(verbose_name='Описание')),
                ('severity', models.CharField(choices=[('P1', 'Критический'), ('P2', 'Высокий'), ('P3', 'Средний'), ('P4', 'Низкий')], max_length=10, verbose_name='Критичность')),
                ('status', models.CharField(choices=[('open', 'Открыт'), ('investigating', 'Расследование'), ('identified', 'Выявлена причина'), ('monitoring', 'Мониторинг'), ('resolved', 'Решен'), ('closed', 'Закрыт')], default='open', max_length=20, verbose_name='Статус')),
                ('category', models.CharField(choices=[('infrastructure', 'Инфраструктура'), ('application', 'Приложение'), ('security', 'Безопасность'), ('data', 'Данные'), ('integration', 'Интеграция'), ('user_experience', 'Пользовательский опыт')], max_length=20, verbose_name='Категория')),
                ('affected_services', models.JSONField(default=list, verbose_name='Затронутые сервисы')),
                ('business_impact', models.TextField(blank=True, verbose_name='Бизнес-влияние')),
                ('user_impact', models.TextField(blank=True, verbose_name='Влияние на пользователей')),
                ('detected_at', models.DateTimeField(verbose_name='Обнаружен')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Решен')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='Закрыт')),
                ('response_time_minutes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Время ответа (мин)')),
                ('resolution_time_minutes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Время решения (мин)')),
                ('sla_breached', models.BooleanField(default=False, verbose_name='SLA нарушен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('custom_fields', models.JSONField(default=dict, verbose_name='Пользовательские поля')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_incidents', to=settings.AUTH_USER_MODEL, verbose_name='Назначен')),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reported_incidents', to=settings.AUTH_USER_MODEL, verbose_name='Сообщил')),
            ],
            options={
                'verbose_name': 'Инцидент',
                'verbose_name_plural': 'Инциденты',
                'db_table': 'incidents',
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('slug', models.SlugField(verbose_name='Слаг')),
                ('content', models.TextField(verbose_name='Содержание')),
                ('excerpt', models.TextField(blank=True, verbose_name='Выдержка')),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('published', 'Опубликовано'), ('archived', 'Архивировано')], default='draft', max_length=20, verbose_name='Статус')),
                ('meta_title', models.CharField(blank=True, max_length=255, verbose_name='Мета заголовок')),
                ('meta_description', models.TextField(blank=True, verbose_name='Мета описание')),
                ('keywords', models.CharField(blank=True, max_length=500, verbose_name='Ключевые слова')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='Количество просмотров')),
                ('helpful_count', models.PositiveIntegerField(default=0, verbose_name='Количество полезных оценок')),
                ('not_helpful_count', models.PositiveIntegerField(default=0, verbose_name='Количество негативных оценок')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата публикации')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('custom_fields', models.JSONField(default=dict, verbose_name='Пользовательские поля')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_articles', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Статья базы знаний',
                'verbose_name_plural': 'Статьи базы знаний',
                'db_table': 'knowledge_articles',
                'ordering': ['-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RatingSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('is_required', models.BooleanField(default=False, verbose_name='Обязательный')),
                ('trigger_on_ticket_close', models.BooleanField(default=True, verbose_name='При закрытии тикета')),
                ('trigger_on_rating', models.BooleanField(default=False, verbose_name='При оценке')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
            ],
            options={
                'verbose_name': 'Опрос оценки',
                'verbose_name_plural': 'Опросы оценок',
                'db_table': 'rating_surveys',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ResponseTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('category', models.CharField(choices=[('greeting', 'Приветствие'), ('acknowledgment', 'Подтверждение'), ('resolution', 'Решение'), ('escalation', 'Эскалация'), ('closing', 'Закрытие'), ('follow_up', 'Дополнительный вопрос'), ('custom', 'Пользовательский')], max_length=20, verbose_name='Категория')),
                ('subject_template', models.CharField(blank=True, max_length=255, verbose_name='Шаблон темы')),
                ('content_template', models.TextField(verbose_name='Шаблон содержимого')),
                ('is_public', models.BooleanField(default=True, verbose_name='Публичный')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='Количество использований')),
                ('last_used_at', models.DateTimeField(blank=True, null=True, verbose_name='Последнее использование')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_templates', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Шаблон ответа',
                'verbose_name_plural': 'Шаблоны ответов',
                'db_table': 'response_templates',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SLA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('response_time', models.IntegerField(verbose_name='Время ответа (часы)')),
                ('resolution_time', models.IntegerField(verbose_name='Время решения (часы)')),
                ('priority', models.CharField(choices=[('low', 'Низкий'), ('medium', 'Средний'), ('high', 'Высокий'), ('urgent', 'Срочный'), ('critical', 'Критический')], max_length=20, verbose_name='Приоритет')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
            ],
            options={
                'verbose_name': 'SLA',
                'verbose_name_plural': 'SLA',
                'db_table': 'slas',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
                ('color', models.CharField(default='#1976d2', max_length=7, verbose_name='Цвет')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
                'db_table': 'tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TemplateVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('variable_type', models.CharField(choices=[('text', 'Текст'), ('number', 'Число'), ('date', 'Дата'), ('datetime', 'Дата и время'), ('user', 'Пользователь'), ('ticket', 'Тикет'), ('system', 'Система')], max_length=20, verbose_name='Тип переменной')),
                ('template_string', models.CharField(max_length=100, verbose_name='Строка шаблона')),
                ('default_value', models.TextField(blank=True, verbose_name='Значение по умолчанию')),
                ('is_system', models.BooleanField(default=False, verbose_name='Системная')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
            ],
            options={
                'verbose_name': 'Переменная шаблона',
                'verbose_name_plural': 'Переменные шаблонов',
                'db_table': 'template_variables',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название арендатора')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг')),
                ('domain', models.CharField(max_length=255, unique=True, verbose_name='Домен')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлён')),
                ('config', models.JSONField(default=dict, verbose_name='Конфигурация')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='tenants/logos/', verbose_name='Логотип')),
                ('primary_color', models.CharField(default='#1976d2', max_length=7, verbose_name='Основной цвет')),
                ('secondary_color', models.CharField(default='#dc004e', max_length=7, verbose_name='Дополнительный цвет')),
                ('features', models.JSONField(default=dict, verbose_name='Фичи')),
            ],
            options={
                'verbose_name': 'Арендатор',
                'verbose_name_plural': 'Арендаторы',
                'db_table': 'tenants',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_id', models.CharField(max_length=20, unique=True, verbose_name='ID тикета')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('description', models.TextField(verbose_name='Описание')),
                ('priority', models.CharField(choices=[('low', 'Низкий'), ('medium', 'Средний'), ('high', 'Высокий'), ('urgent', 'Срочный'), ('critical', 'Критический')], default='medium', max_length=20, verbose_name='Приоритет')),
                ('status', models.CharField(choices=[('open', 'Открыт'), ('in_progress', 'В работе'), ('pending', 'Ожидание'), ('resolved', 'Решён'), ('closed', 'Закрыт'), ('cancelled', 'Отменён')], default='open', max_length=20, verbose_name='Статус')),
                ('category', models.CharField(choices=[('technical', 'Техническая'), ('billing', 'Биллинг'), ('general', 'Общая'), ('bug_report', 'Баг'), ('feature_request', 'Запрос фичи'), ('other', 'Другое')], default='general', max_length=20, verbose_name='Категория')),
                ('sla_hours', models.IntegerField(default=24, verbose_name='SLA (часы)')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='Крайний срок')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Время решения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('custom_fields', models.JSONField(default=dict, verbose_name='Пользовательские поля')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Назначен')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('tags', models.ManyToManyField(blank=True, to='app.tag', verbose_name='Теги')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'Тикет',
                'verbose_name_plural': 'Тикеты',
                'db_table': 'tickets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketSLA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_response_at', models.DateTimeField(blank=True, null=True, verbose_name='Время первого ответа')),
                ('resolution_at', models.DateTimeField(blank=True, null=True, verbose_name='Время решения')),
                ('is_breached', models.BooleanField(default=False, verbose_name='SLA нарушен')),
                ('breach_reason', models.TextField(blank=True, verbose_name='Причина нарушения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('sla', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_slas', to='app.sla', verbose_name='SLA')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sla_tracking', to='app.ticket', verbose_name='Тикет')),
            ],
            options={
                'verbose_name': 'SLA тикета',
                'verbose_name_plural': 'SLA тикетов',
                'db_table': 'ticket_slas',
            },
        ),
        migrations.CreateModel(
            name='TicketComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Содержимое')),
                ('is_internal', models.BooleanField(default=False, verbose_name='Внутренний')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_comments', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='app.ticket', verbose_name='Тикет')),
            ],
            options={
                'verbose_name': 'Комментарий к тикету',
                'verbose_name_plural': 'Комментарии к тикету',
                'db_table': 'ticket_comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='tickets/attachments/', verbose_name='Файл')),
                ('filename', models.CharField(max_length=255, verbose_name='Имя файла')),
                ('file_size', models.BigIntegerField(verbose_name='Размер файла')),
                ('mime_type', models.CharField(max_length=100, verbose_name='MIME-тип')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='app.ticket', verbose_name='Тикет')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_attachments', to=settings.AUTH_USER_MODEL, verbose_name='Загрузил')),
            ],
            options={
                'verbose_name': 'Вложение тикета',
                'verbose_name_plural': 'Вложения тикетов',
                'db_table': 'ticket_attachments',
            },
        ),
        migrations.CreateModel(
            name='TenantConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timezone', models.CharField(default='UTC', max_length=50, verbose_name='Часовой пояс')),
                ('language', models.CharField(default='en', max_length=10, verbose_name='Язык')),
                ('date_format', models.CharField(default='%Y-%m-%d', max_length=20, verbose_name='Формат даты')),
                ('time_format', models.CharField(default='24', max_length=10, verbose_name='Формат времени')),
                ('auto_assign_tickets', models.BooleanField(default=True, verbose_name='Автоназначение тикетов')),
                ('ticket_priority_levels', models.JSONField(default=list, verbose_name='Уровни приоритетов')),
                ('ticket_categories', models.JSONField(default=list, verbose_name='Категории тикетов')),
                ('default_sla_hours', models.IntegerField(default=24, verbose_name='Базовый SLA (часы)')),
                ('escalation_rules', models.JSONField(default=dict, verbose_name='Правила эскалации')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Уведомления по email')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='Уведомления по SMS')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Push-уведомления')),
                ('password_policy', models.JSONField(default=dict, verbose_name='Политика паролей')),
                ('session_timeout', models.IntegerField(default=3600, verbose_name='Таймаут сессии (сек)')),
                ('two_factor_required', models.BooleanField(default=False, verbose_name='Двухфакторная аутентификация')),
                ('ldap_enabled', models.BooleanField(default=False, verbose_name='LDAP включён')),
                ('ldap_config', models.JSONField(default=dict, verbose_name='Конфигурация LDAP')),
                ('sso_enabled', models.BooleanField(default=False, verbose_name='SSO включён')),
                ('sso_config', models.JSONField(default=dict, verbose_name='Конфигурация SSO')),
                ('custom_fields', models.JSONField(default=dict, verbose_name='Пользовательские поля')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('tenant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='configuration', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'Настройки арендатора',
                'verbose_name_plural': 'Настройки арендаторов',
                'db_table': 'tenant_configurations',
            },
        ),
        migrations.CreateModel(
            name='TemplateUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_subject', models.CharField(blank=True, max_length=255, verbose_name='Кастомная тема')),
                ('custom_content', models.TextField(blank=True, verbose_name='Кастомное содержимое')),
                ('variables_used', models.JSONField(default=dict, verbose_name='Использованные переменные')),
                ('used_at', models.DateTimeField(auto_now_add=True, verbose_name='Время использования')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usages', to='app.responsetemplate', verbose_name='Шаблон')),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='template_usages', to='app.ticket', verbose_name='Тикет')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='template_usages', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Использование шаблона',
                'verbose_name_plural': 'Использования шаблонов',
                'db_table': 'template_usages',
                'ordering': ['-used_at'],
            },
        ),
        migrations.AddField(
            model_name='sla',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slas', to='app.tenant', verbose_name='Арендатор'),
        ),
        migrations.AddField(
            model_name='responsetemplate',
            name='tags',
            field=models.ManyToManyField(blank=True, to='app.tag', verbose_name='Теги'),
        ),
        migrations.AddField(
            model_name='responsetemplate',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_templates', to='app.tenant', verbose_name='Арендатор'),
        ),
        migrations.CreateModel(
            name='RatingSurveyResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('responses', models.JSONField(default=dict, verbose_name='Ответы')),
                ('completed_at', models.DateTimeField(auto_now_add=True, verbose_name='Завершен')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='app.ratingsurvey', verbose_name='Опрос')),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rating_survey_responses', to='app.ticket', verbose_name='Тикет')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating_survey_responses', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Ответ на опрос',
                'verbose_name_plural': 'Ответы на опросы',
                'db_table': 'rating_survey_responses',
                'ordering': ['-completed_at'],
            },
        ),
        migrations.CreateModel(
            name='RatingSurveyQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='Текст вопроса')),
                ('question_type', models.CharField(choices=[('rating', 'Оценка'), ('text', 'Текст'), ('choice', 'Выбор'), ('multiple_choice', 'Множественный выбор')], max_length=20, verbose_name='Тип вопроса')),
                ('is_required', models.BooleanField(default=False, verbose_name='Обязательный')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('choices', models.JSONField(blank=True, default=list, verbose_name='Варианты ответов')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='app.ratingsurvey', verbose_name='Опрос')),
            ],
            options={
                'verbose_name': 'Вопрос опроса',
                'verbose_name_plural': 'Вопросы опросов',
                'db_table': 'rating_survey_questions',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='ratingsurvey',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating_surveys', to='app.tenant', verbose_name='Арендатор'),
        ),
        migrations.CreateModel(
            name='PerformanceThreshold',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('metric_type', models.CharField(max_length=30, verbose_name='Тип метрики')),
                ('warning_threshold', models.FloatField(verbose_name='Порог предупреждения')),
                ('critical_threshold', models.FloatField(verbose_name='Критический порог')),
                ('conditions', models.JSONField(default=dict, verbose_name='Условия')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performance_thresholds', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'Пороговое значение',
                'verbose_name_plural': 'Пороговые значения',
                'db_table': 'performance_thresholds',
                'ordering': ['metric_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('report_type', models.CharField(choices=[('daily', 'Ежедневный'), ('weekly', 'Еженедельный'), ('monthly', 'Ежемесячный'), ('custom', 'Пользовательский')], max_length=20, verbose_name='Тип отчета')),
                ('start_date', models.DateTimeField(verbose_name='Дата начала')),
                ('end_date', models.DateTimeField(verbose_name='Дата окончания')),
                ('config', models.JSONField(default=dict, verbose_name='Конфигурация')),
                ('results', models.JSONField(default=dict, verbose_name='Результаты')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_reports', to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performance_reports', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'Отчет производительности',
                'verbose_name_plural': 'Отчеты производительности',
                'db_table': 'performance_reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('config', models.JSONField(default=dict, verbose_name='Конфигурация')),
                ('is_public', models.BooleanField(default=False, verbose_name='Публичный')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_dashboards', to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performance_dashboards', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'Дашборд производительности',
                'verbose_name_plural': 'Дашборды производительности',
                'db_table': 'performance_dashboards',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('metric_type', models.CharField(max_length=30, verbose_name='Тип метрики')),
                ('threshold_value', models.FloatField(verbose_name='Пороговое значение')),
                ('comparison_operator', models.CharField(choices=[('gt', 'Больше'), ('gte', 'Больше или равно'), ('lt', 'Меньше'), ('lte', 'Меньше или равно'), ('eq', 'Равно'), ('ne', 'Не равно')], max_length=10, verbose_name='Оператор сравнения')),
                ('severity', models.CharField(choices=[('low', 'Низкий'), ('medium', 'Средний'), ('high', 'Высокий'), ('critical', 'Критический')], max_length=20, verbose_name='Критичность')),
                ('status', models.CharField(choices=[('active', 'Активен'), ('acknowledged', 'Подтвержден'), ('resolved', 'Решен'), ('suppressed', 'Подавлен')], default='active', max_length=20, verbose_name='Статус')),
                ('conditions', models.JSONField(default=dict, verbose_name='Условия')),
                ('actions', models.JSONField(default=dict, verbose_name='Действия')),
                ('triggered_at', models.DateTimeField(auto_now_add=True, verbose_name='Сработал')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Решен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performance_alerts', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'Алерт производительности',
                'verbose_name_plural': 'Алерты производительности',
                'db_table': 'performance_alerts',
                'ordering': ['-triggered_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('ticket', 'Тикет'), ('system', 'Система'), ('chat', 'Чат')], default='system', max_length=20, verbose_name='Тип')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('message', models.TextField(blank=True, verbose_name='Сообщение')),
                ('payload', models.JSONField(default=dict, verbose_name='Данные')),
                ('is_read', models.BooleanField(db_index=True, default=False, verbose_name='Прочитано')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Создано')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=255, verbose_name='Запрос')),
                ('results_count', models.PositiveIntegerField(default=0, verbose_name='Количество результатов')),
                ('searched_at', models.DateTimeField(auto_now_add=True, verbose_name='Время поиска')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_searches', to='app.tenant', verbose_name='Арендатор')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='knowledge_searches', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Поиск в базе знаний',
                'verbose_name_plural': 'Поиски в базе знаний',
                'db_table': 'knowledge_searches',
                'ordering': ['-searched_at'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активно')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='app.knowledgecategory', verbose_name='Родительская категория')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_categories', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'Категория базы знаний',
                'verbose_name_plural': 'Категории базы знаний',
                'db_table': 'knowledge_categories',
                'ordering': ['order', 'name'],
                'unique_together': {('name', 'tenant')},
            },
        ),
        migrations.CreateModel(
            name='KnowledgeArticleView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP адрес')),
                ('user_agent', models.TextField(blank=True, verbose_name='Пользовательский агент')),
                ('viewed_at', models.DateTimeField(auto_now_add=True, verbose_name='Время просмотра')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='app.knowledgearticle', verbose_name='Статья')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='knowledge_views', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Просмотр статьи базы знаний',
                'verbose_name_plural': 'Просмотры статей базы знаний',
                'db_table': 'knowledge_article_views',
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeArticleAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='knowledge/attachments/', verbose_name='Файл')),
                ('filename', models.CharField(max_length=255, verbose_name='Имя файла')),
                ('file_size', models.BigIntegerField(verbose_name='Размер файла')),
                ('mime_type', models.CharField(max_length=100, verbose_name='MIME тип')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='app.knowledgearticle', verbose_name='Статья')),
            ],
            options={
                'verbose_name': 'Вложение статьи базы знаний',
                'verbose_name_plural': 'Вложения статей базы знаний',
                'db_table': 'knowledge_article_attachments',
            },
        ),
        migrations.AddField(
            model_name='knowledgearticle',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='app.knowledgecategory', verbose_name='Категория'),
        ),
        migrations.AddField(
            model_name='knowledgearticle',
            name='tags',
            field=models.ManyToManyField(blank=True, to='app.tag', verbose_name='Теги'),
        ),
        migrations.AddField(
            model_name='knowledgearticle',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_articles', to='app.tenant', verbose_name='Арендатор'),
        ),
        migrations.CreateModel(
            name='IncidentUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('content', models.TextField(verbose_name='Содержимое')),
                ('update_type', models.CharField(choices=[('status_change', 'Изменение статуса'), ('investigation', 'Расследование'), ('resolution', 'Решение'), ('communication', 'Коммуникация'), ('escalation', 'Эскалация')], max_length=20, verbose_name='Тип обновления')),
                ('is_public', models.BooleanField(default=True, verbose_name='Публичное')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident_updates', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='app.incident', verbose_name='Инцидент')),
            ],
            options={
                'verbose_name': 'Обновление инцидента',
                'verbose_name_plural': 'Обновления инцидентов',
                'db_table': 'incident_updates',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='IncidentTimeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('created', 'Создан'), ('assigned', 'Назначен'), ('status_changed', 'Статус изменен'), ('escalated', 'Эскалирован'), ('resolved', 'Решен'), ('closed', 'Закрыт'), ('comment_added', 'Добавлен комментарий'), ('attachment_added', 'Добавлено вложение')], max_length=30, verbose_name='Тип события')),
                ('description', models.TextField(verbose_name='Описание')),
                ('metadata', models.JSONField(default=dict, verbose_name='Метаданные')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incident_timeline_events', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timeline', to='app.incident', verbose_name='Инцидент')),
            ],
            options={
                'verbose_name': 'Событие временной линии',
                'verbose_name_plural': 'События временной линии',
                'db_table': 'incident_timeline',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='IncidentEscalation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveIntegerField(verbose_name='Уровень')),
                ('reason', models.TextField(verbose_name='Причина')),
                ('escalated_at', models.DateTimeField(auto_now_add=True, verbose_name='Время эскалации')),
                ('is_acknowledged', models.BooleanField(default=False, verbose_name='Подтверждена')),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True, verbose_name='Время подтверждения')),
                ('escalated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident_escalations', to=settings.AUTH_USER_MODEL, verbose_name='Эскалировал')),
                ('escalated_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='escalated_incidents', to=settings.AUTH_USER_MODEL, verbose_name='Эскалирован')),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='escalations', to='app.incident', verbose_name='Инцидент')),
            ],
            options={
                'verbose_name': 'Эскалация инцидента',
                'verbose_name_plural': 'Эскалации инцидентов',
                'db_table': 'incident_escalations',
                'ordering': ['-escalated_at'],
            },
        ),
        migrations.CreateModel(
            name='IncidentAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='incidents/attachments/', verbose_name='Файл')),
                ('filename', models.CharField(max_length=255, verbose_name='Имя файла')),
                ('file_size', models.BigIntegerField(verbose_name='Размер файла')),
                ('mime_type', models.CharField(max_length=100, verbose_name='MIME-тип')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='app.incident', verbose_name='Инцидент')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident_attachments', to=settings.AUTH_USER_MODEL, verbose_name='Загрузил')),
            ],
            options={
                'verbose_name': 'Вложение инцидента',
                'verbose_name_plural': 'Вложения инцидентов',
                'db_table': 'incident_attachments',
            },
        ),
        migrations.AddField(
            model_name='incident',
            name='tags',
            field=models.ManyToManyField(blank=True, to='app.tag', verbose_name='Теги'),
        ),
        migrations.AddField(
            model_name='incident',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incidents', to='app.tenant', verbose_name='Арендатор'),
        ),
        migrations.CreateModel(
            name='FeatureFlag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_enabled', models.BooleanField(default=False, verbose_name='Включен')),
                ('rollout_percentage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Процент пользователей')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата начала')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата окончания')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('target_tenants', models.ManyToManyField(blank=True, related_name='feature_flags', to='app.tenant', verbose_name='Целевые арендаторы')),
            ],
            options={
                'verbose_name': 'Флаг функции',
                'verbose_name_plural': 'Флаги функций',
                'db_table': 'feature_flags',
            },
        ),
        migrations.CreateModel(
            name='AutomationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('template_data', models.JSONField(default=dict, verbose_name='Данные шаблона')),
                ('category', models.CharField(blank=True, max_length=100, verbose_name='Категория')),
                ('is_public', models.BooleanField(default=True, verbose_name='Публичный')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='Количество использований')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='automation_templates', to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
            ],
            options={
                'verbose_name': 'Шаблон правила',
                'verbose_name_plural': 'Шаблоны правил',
                'db_table': 'automation_templates',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='AutomationSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.CharField(choices=[('once', 'Один раз'), ('daily', 'Ежедневно'), ('weekly', 'Еженедельно'), ('monthly', 'Ежемесячно'), ('custom', 'Пользовательское')], max_length=20, verbose_name='Частота')),
                ('cron_expression', models.CharField(blank=True, max_length=100, verbose_name='Cron выражение')),
                ('start_time', models.TimeField(verbose_name='Время начала')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='Время окончания')),
                ('weekdays', models.JSONField(blank=True, default=list, verbose_name='Дни недели')),
                ('month_days', models.JSONField(blank=True, default=list, verbose_name='Дни месяца')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активно')),
                ('timezone', models.CharField(default='UTC', max_length=50, verbose_name='Часовой пояс')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('rule', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='app.automationrule', verbose_name='Правило')),
            ],
            options={
                'verbose_name': 'Расписание правила',
                'verbose_name_plural': 'Расписания правил',
                'db_table': 'automation_schedules',
            },
        ),
        migrations.AddField(
            model_name='automationrule',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='automation_rules', to='app.tenant', verbose_name='Арендатор'),
        ),
        migrations.CreateModel(
            name='AutomationExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Ожидает'), ('running', 'Выполняется'), ('completed', 'Завершено'), ('failed', 'Ошибка'), ('skipped', 'Пропущено')], default='pending', max_length=20, verbose_name='Статус')),
                ('result', models.JSONField(default=dict, verbose_name='Результат')),
                ('error_message', models.TextField(blank=True, verbose_name='Сообщение об ошибке')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Начато')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Завершено')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='app.automationrule', verbose_name='Правило')),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='automation_executions', to='app.ticket', verbose_name='Тикет')),
            ],
            options={
                'verbose_name': 'Выполнение правила',
                'verbose_name_plural': 'Выполнения правил',
                'db_table': 'automation_executions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='AutomationCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition_type', models.CharField(choices=[('field_equals', 'Поле равно'), ('field_contains', 'Поле содержит'), ('field_greater_than', 'Поле больше'), ('field_less_than', 'Поле меньше'), ('field_in', 'Поле в списке'), ('field_not_in', 'Поле не в списке'), ('field_is_empty', 'Поле пустое'), ('field_is_not_empty', 'Поле не пустое'), ('time_based', 'По времени'), ('user_based', 'По пользователю'), ('custom', 'Пользовательское')], max_length=20, verbose_name='Тип условия')),
                ('field_name', models.CharField(blank=True, max_length=100, verbose_name='Название поля')),
                ('operator', models.CharField(blank=True, max_length=20, verbose_name='Оператор')),
                ('value', models.TextField(blank=True, verbose_name='Значение')),
                ('logical_operator', models.CharField(choices=[('AND', 'И'), ('OR', 'ИЛИ')], default='AND', max_length=10, verbose_name='Логический оператор')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rule_conditions', to='app.automationrule', verbose_name='Правило')),
            ],
            options={
                'verbose_name': 'Условие правила',
                'verbose_name_plural': 'Условия правил',
                'db_table': 'automation_conditions',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='AutomationAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('assign_ticket', 'Назначить тикет'), ('change_status', 'Изменить статус'), ('change_priority', 'Изменить приоритет'), ('add_tag', 'Добавить тег'), ('remove_tag', 'Удалить тег'), ('send_notification', 'Отправить уведомление'), ('send_email', 'Отправить email'), ('add_comment', 'Добавить комментарий'), ('escalate', 'Эскалировать'), ('close_ticket', 'Закрыть тикет'), ('custom', 'Пользовательское')], max_length=20, verbose_name='Тип действия')),
                ('parameters', models.JSONField(default=dict, verbose_name='Параметры')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rule_actions', to='app.automationrule', verbose_name='Правило')),
            ],
            options={
                'verbose_name': 'Действие правила',
                'verbose_name_plural': 'Действия правил',
                'db_table': 'automation_actions',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ABTestVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('weight', models.PositiveIntegerField(default=50, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Вес (%)')),
                ('config', models.JSONField(default=dict, verbose_name='Конфигурация')),
                ('participants_count', models.PositiveIntegerField(default=0, verbose_name='Участников')),
                ('conversions_count', models.PositiveIntegerField(default=0, verbose_name='Конверсий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('ab_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='app.abtest', verbose_name='A/B Тест')),
            ],
            options={
                'verbose_name': 'Вариант A/B Теста',
                'verbose_name_plural': 'Варианты A/B Тестов',
                'db_table': 'ab_test_variants',
                'unique_together': {('ab_test', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ABTestParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_converted', models.BooleanField(default=False, verbose_name='Конвертирован')),
                ('converted_at', models.DateTimeField(blank=True, null=True, verbose_name='Время конверсии')),
                ('assigned_at', models.DateTimeField(auto_now_add=True, verbose_name='Назначен')),
                ('ab_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='app.abtest', verbose_name='A/B Тест')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ab_test_participations', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='app.abtestvariant', verbose_name='Вариант')),
            ],
            options={
                'verbose_name': 'Участник A/B Теста',
                'verbose_name_plural': 'Участники A/B Тестов',
                'db_table': 'ab_test_participants',
                'unique_together': {('ab_test', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ABTestEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('view', 'Просмотр'), ('click', 'Клик'), ('conversion', 'Конверсия'), ('custom', 'Пользовательское')], max_length=20, verbose_name='Тип события')),
                ('event_name', models.CharField(max_length=100, verbose_name='Название события')),
                ('properties', models.JSONField(default=dict, verbose_name='Свойства')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP адрес')),
                ('user_agent', models.TextField(blank=True, verbose_name='Пользовательский агент')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='app.abtestparticipant', verbose_name='Участник')),
            ],
            options={
                'verbose_name': 'Событие A/B Теста',
                'verbose_name_plural': 'События A/B Тестов',
                'db_table': 'ab_test_events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='abtest',
            name='target_tenants',
            field=models.ManyToManyField(blank=True, related_name='ab_tests', to='app.tenant', verbose_name='Целевые арендаторы'),
        ),
        migrations.AddField(
            model_name='user',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='app.tenant', verbose_name='Арендатор'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='TicketRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.PositiveIntegerField(choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Общая оценка')),
                ('response_time_rating', models.PositiveIntegerField(blank=True, choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Оценка времени ответа')),
                ('resolution_quality_rating', models.PositiveIntegerField(blank=True, choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Оценка качества решения')),
                ('communication_rating', models.PositiveIntegerField(blank=True, choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Оценка коммуникации')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('ticket', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='app.ticket', verbose_name='Тикет')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_ratings', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Оценка тикета',
                'verbose_name_plural': 'Оценки тикетов',
                'db_table': 'ticket_ratings',
                'unique_together': {('ticket', 'user')},
            },
        ),
        migrations.CreateModel(
            name='TemplateVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_number', models.PositiveIntegerField(verbose_name='Номер версии')),
                ('subject_template', models.CharField(blank=True, max_length=255, verbose_name='Шаблон темы')),
                ('content_template', models.TextField(verbose_name='Шаблон содержимого')),
                ('changes', models.TextField(blank=True, verbose_name='Изменения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='template_versions', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='app.responsetemplate', verbose_name='Шаблон')),
            ],
            options={
                'verbose_name': 'Версия шаблона',
                'verbose_name_plural': 'Версии шаблонов',
                'db_table': 'template_versions',
                'ordering': ['-version_number'],
                'unique_together': {('template', 'version_number')},
            },
        ),
        migrations.CreateModel(
            name='TemplateCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('color', models.CharField(default='#1976d2', max_length=7, verbose_name='Цвет')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='template_categories', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'Категория шаблонов',
                'verbose_name_plural': 'Категории шаблонов',
                'db_table': 'template_categories',
                'ordering': ['order', 'name'],
                'unique_together': {('name', 'tenant')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='sla',
            unique_together={('tenant', 'priority')},
        ),
        migrations.CreateModel(
            name='ServiceRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_satisfaction', models.PositiveIntegerField(choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Общая удовлетворенность')),
                ('response_time_satisfaction', models.PositiveIntegerField(blank=True, choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Удовлетворенность временем ответа')),
                ('resolution_quality_satisfaction', models.PositiveIntegerField(blank=True, choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Удовлетворенность качеством решения')),
                ('communication_satisfaction', models.PositiveIntegerField(blank=True, choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Удовлетворенность коммуникацией')),
                ('system_usability_satisfaction', models.PositiveIntegerField(blank=True, choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Удовлетворенность удобством системы')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('suggestions', models.TextField(blank=True, verbose_name='Предложения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_ratings', to='app.tenant', verbose_name='Арендатор')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_ratings', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Оценка сервиса',
                'verbose_name_plural': 'Оценки сервиса',
                'db_table': 'service_ratings',
                'unique_together': {('user', 'tenant')},
            },
        ),
        migrations.CreateModel(
            name='RatingCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_required', models.BooleanField(default=False, verbose_name='Обязательная')),
                ('weight', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Вес')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating_categories', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'Категория оценки',
                'verbose_name_plural': 'Категории оценок',
                'db_table': 'rating_categories',
                'ordering': ['order', 'name'],
                'unique_together': {('name', 'tenant')},
            },
        ),
        migrations.CreateModel(
            name='PerformanceTrace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trace_id', models.CharField(max_length=100, unique=True, verbose_name='ID трассировки')),
                ('span_id', models.CharField(max_length=100, verbose_name='ID span')),
                ('parent_span_id', models.CharField(blank=True, max_length=100, verbose_name='ID родительского span')),
                ('operation_name', models.CharField(max_length=200, verbose_name='Название операции')),
                ('service_name', models.CharField(max_length=100, verbose_name='Название сервиса')),
                ('start_time', models.DateTimeField(verbose_name='Время начала')),
                ('end_time', models.DateTimeField(verbose_name='Время окончания')),
                ('duration_ms', models.PositiveIntegerField(verbose_name='Длительность (мс)')),
                ('status_code', models.PositiveIntegerField(blank=True, null=True, verbose_name='Код статуса')),
                ('is_error', models.BooleanField(default=False, verbose_name='Ошибка')),
                ('error_message', models.TextField(blank=True, verbose_name='Сообщение об ошибке')),
                ('tags', models.JSONField(default=dict, verbose_name='Теги')),
                ('logs', models.JSONField(default=list, verbose_name='Логи')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performance_traces', to='app.tenant', verbose_name='Арендатор')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performance_traces', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Трассировка производительности',
                'verbose_name_plural': 'Трассировки производительности',
                'db_table': 'performance_traces',
                'ordering': ['-start_time'],
                'indexes': [models.Index(fields=['trace_id'], name='performance_trace_i_045c42_idx'), models.Index(fields=['service_name', 'start_time'], name='performance_service_1eccbe_idx'), models.Index(fields=['operation_name', 'start_time'], name='performance_operati_b72ab4_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('metric_type', models.CharField(choices=[('response_time', 'Время ответа'), ('throughput', 'Пропускная способность'), ('error_rate', 'Частота ошибок'), ('cpu_usage', 'Использование CPU'), ('memory_usage', 'Использование памяти'), ('disk_usage', 'Использование диска'), ('database_query_time', 'Время запроса к БД'), ('cache_hit_rate', 'Частота попаданий в кэш'), ('custom', 'Пользовательская')], max_length=30, verbose_name='Тип метрики')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('value', models.FloatField(verbose_name='Значение')),
                ('unit', models.CharField(default='ms', max_length=20, verbose_name='Единица измерения')),
                ('service', models.CharField(blank=True, max_length=100, verbose_name='Сервис')),
                ('endpoint', models.CharField(blank=True, max_length=200, verbose_name='Эндпоинт')),
                ('method', models.CharField(blank=True, max_length=10, verbose_name='HTTP метод')),
                ('tags', models.JSONField(default=dict, verbose_name='Теги')),
                ('metadata', models.JSONField(default=dict, verbose_name='Метаданные')),
                ('timestamp', models.DateTimeField(verbose_name='Время измерения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('tenant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'Метрика производительности',
                'verbose_name_plural': 'Метрики производительности',
                'db_table': 'performance_metrics',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['metric_type', 'timestamp'], name='performance_metric__c88270_idx'), models.Index(fields=['service', 'timestamp'], name='performance_service_2cb936_idx'), models.Index(fields=['tenant', 'timestamp'], name='performance_tenant__0864aa_idx')],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeArticleRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Оценка')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='app.knowledgearticle', verbose_name='Статья')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_ratings', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Оценка статьи базы знаний',
                'verbose_name_plural': 'Оценки статей базы знаний',
                'db_table': 'knowledge_article_ratings',
                'unique_together': {('article', 'user')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='knowledgearticle',
            unique_together={('slug', 'tenant')},
        ),
        migrations.CreateModel(
            name='IncidentSLA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('severity', models.CharField(choices=[('P1', 'Критический'), ('P2', 'Высокий'), ('P3', 'Средний'), ('P4', 'Низкий')], max_length=10, verbose_name='Критичность')),
                ('response_time_minutes', models.PositiveIntegerField(verbose_name='Время ответа (мин)')),
                ('resolution_time_minutes', models.PositiveIntegerField(verbose_name='Время решения (мин)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident_slas', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'SLA инцидента',
                'verbose_name_plural': 'SLA инцидентов',
                'db_table': 'incident_slas',
                'unique_together': {('tenant', 'severity')},
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_name', models.CharField(db_index=True, max_length=200, verbose_name='Комната')),
                ('content', models.TextField(verbose_name='Содержимое')),
                ('message_type', models.CharField(default='text', max_length=20, verbose_name='Тип сообщения')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to=settings.AUTH_USER_MODEL, verbose_name='Отправитель')),
            ],
            options={
                'verbose_name': 'Сообщение чата',
                'verbose_name_plural': 'Сообщения чата',
                'db_table': 'chat_messages',
                'indexes': [models.Index(fields=['room_name', 'timestamp'], name='chat_messag_room_na_052c88_idx')],
            },
        ),
        migrations.CreateModel(
            name='AgentRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('professionalism_rating', models.PositiveIntegerField(choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Профессионализм')),
                ('knowledge_rating', models.PositiveIntegerField(choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Знания')),
                ('communication_rating', models.PositiveIntegerField(choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Коммуникация')),
                ('problem_solving_rating', models.PositiveIntegerField(choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Решение проблем')),
                ('overall_rating', models.PositiveIntegerField(choices=[(1, 'Очень плохо'), (2, 'Плохо'), (3, 'Удовлетворительно'), (4, 'Хорошо'), (5, 'Отлично')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Общая оценка')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent_ratings', to=settings.AUTH_USER_MODEL, verbose_name='Агент')),
                ('rated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_agent_ratings', to=settings.AUTH_USER_MODEL, verbose_name='Оценил')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent_ratings', to='app.ticket', verbose_name='Тикет')),
            ],
            options={
                'verbose_name': 'Оценка агента',
                'verbose_name_plural': 'Оценки агентов',
                'db_table': 'agent_ratings',
                'unique_together': {('agent', 'rated_by', 'ticket')},
            },
        ),
        migrations.CreateModel(
            name='ABTestMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('metric_type', models.CharField(choices=[('conversion_rate', 'Конверсия'), ('click_through_rate', 'CTR'), ('bounce_rate', 'Отказы'), ('time_on_page', 'Время на странице'), ('custom', 'Пользовательская')], max_length=30, verbose_name='Тип метрики')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('target_value', models.FloatField(blank=True, null=True, verbose_name='Целевое значение')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Основная метрика')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('ab_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='app.abtest', verbose_name='A/B Тест')),
            ],
            options={
                'verbose_name': 'Метрика A/B Теста',
                'verbose_name_plural': 'Метрики A/B Тестов',
                'db_table': 'ab_test_metrics',
                'unique_together': {('ab_test', 'name')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='user',
            unique_together={('username', 'tenant')},
        ),
    ]
