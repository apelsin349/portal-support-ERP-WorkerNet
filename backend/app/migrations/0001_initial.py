# Generated by Django 4.2.7 on 2024-01-01 00:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.core.validators
from django.contrib.auth.validators import UnicodeUsernameValidator


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Tenant models
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название арендатора')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг')),
                ('domain', models.CharField(max_length=255, unique=True, verbose_name='Домен')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлён')),
                ('config', models.JSONField(default=dict, verbose_name='Конфигурация')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='tenants/logos/', verbose_name='Логотип')),
                ('primary_color', models.CharField(default='#1976d2', max_length=7, verbose_name='Основной цвет')),
                ('secondary_color', models.CharField(default='#dc004e', max_length=7, verbose_name='Дополнительный цвет')),
                ('features', models.JSONField(default=dict, verbose_name='Фичи')),
            ],
            options={
                'verbose_name': 'Арендатор',
                'verbose_name_plural': 'Арендаторы',
                'db_table': 'tenants',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='app.tenant', verbose_name='Арендатор')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='users/avatars/', verbose_name='Аватар')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='Отдел')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='Должность')),
                ('preferences', models.JSONField(default=dict, verbose_name='Предпочтения')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Верифицирован')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP последнего входа')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='TenantConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timezone', models.CharField(default='UTC', max_length=50, verbose_name='Часовой пояс')),
                ('language', models.CharField(default='en', max_length=10, verbose_name='Язык')),
                ('date_format', models.CharField(default='%Y-%m-%d', max_length=20, verbose_name='Формат даты')),
                ('time_format', models.CharField(default='24', max_length=10, verbose_name='Формат времени')),
                ('auto_assign_tickets', models.BooleanField(default=True, verbose_name='Автоназначение тикетов')),
                ('ticket_priority_levels', models.JSONField(default=list, verbose_name='Уровни приоритетов')),
                ('ticket_categories', models.JSONField(default=list, verbose_name='Категории тикетов')),
                ('default_sla_hours', models.IntegerField(default=24, verbose_name='Базовый SLA (часы)')),
                ('escalation_rules', models.JSONField(default=dict, verbose_name='Правила эскалации')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Уведомления по email')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='Уведомления по SMS')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Push-уведомления')),
                ('password_policy', models.JSONField(default=dict, verbose_name='Политика паролей')),
                ('session_timeout', models.IntegerField(default=3600, verbose_name='Таймаут сессии (сек)')),
                ('two_factor_required', models.BooleanField(default=False, verbose_name='Двухфакторная аутентификация')),
                ('ldap_enabled', models.BooleanField(default=False, verbose_name='LDAP включён')),
                ('ldap_config', models.JSONField(default=dict, verbose_name='Конфигурация LDAP')),
                ('sso_enabled', models.BooleanField(default=False, verbose_name='SSO включён')),
                ('sso_config', models.JSONField(default=dict, verbose_name='Конфигурация SSO')),
                ('custom_fields', models.JSONField(default=dict, verbose_name='Пользовательские поля')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('tenant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='configuration', to='app.tenant', verbose_name='Арендатор')),
            ],
            options={
                'verbose_name': 'Настройки арендатора',
                'verbose_name_plural': 'Настройки арендаторов',
                'db_table': 'tenant_configurations',
            },
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('username', 'tenant'), name='unique_username_per_tenant'),
        ),
    ]
