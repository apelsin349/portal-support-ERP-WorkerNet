#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å API schema.
"""
import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

def check_django_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Django."""
    try:
        from django.conf import settings
        print(f"‚úì Django settings loaded successfully")
        print(f"  DEBUG: {settings.DEBUG}")
        print(f"  ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
        print(f"  INSTALLED_APPS: {len(settings.INSTALLED_APPS)} apps")
        return True
    except Exception as e:
        print(f"‚úó Error loading Django settings: {e}")
        return False

def check_models():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏."""
    try:
        from django.apps import apps
        models = apps.get_models()
        print(f"‚úì Found {len(models)} models")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
        from app.models import User, Tenant, Ticket
        print(f"‚úì Core models imported successfully")
        return True
    except Exception as e:
        print(f"‚úó Error with models: {e}")
        return False

def check_api_urls():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º API URLs."""
    try:
        from django.urls import reverse
        from django.test import RequestFactory
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ URL patterns
        factory = RequestFactory()
        request = factory.get('/api/v1/health/')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã API
        from app.api.api_urls import urlpatterns
        print(f"‚úì API URLs loaded successfully ({len(urlpatterns)} patterns)")
        return True
    except Exception as e:
        print(f"‚úó Error with API URLs: {e}")
        return False

def check_drf_spectacular():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º drf-spectacular."""
    try:
        from drf_spectacular.views import SpectacularAPIView
        from django.conf import settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        spectacular_settings = getattr(settings, 'SPECTACULAR_SETTINGS', {})
        print(f"‚úì drf-spectacular configured")
        print(f"  Title: {spectacular_settings.get('TITLE', 'Not set')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
        view = SpectacularAPIView()
        print(f"‚úì SpectacularAPIView can be instantiated")
        return True
    except Exception as e:
        print(f"‚úó Error with drf-spectacular: {e}")
        return False

def generate_schema():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ö–µ–º—É API."""
    try:
        from drf_spectacular.openapi import AutoSchema
        from django.test import RequestFactory
        
        factory = RequestFactory()
        request = factory.get('/api/schema/')
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É
        schema_generator = AutoSchema()
        print(f"‚úì Schema generator created successfully")
        return True
    except Exception as e:
        print(f"‚úó Error generating schema: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API Schema WorkerNet Portal")
    print("=" * 50)
    
    checks = [
        ("Django Setup", check_django_setup),
        ("Models", check_models),
        ("API URLs", check_api_urls),
        ("drf-spectacular", check_drf_spectacular),
        ("Schema Generation", generate_schema),
    ]
    
    results = []
    for name, check_func in checks:
        print(f"\nüìã Checking {name}...")
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚úó Unexpected error in {name}: {e}")
            results.append((name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    
    all_passed = True
    for name, result in results:
        status = "‚úì PASS" if result else "‚úó FAIL"
        print(f"  {name}: {status}")
        if not result:
            all_passed = False
    
    if all_passed:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("API schema –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã API schema.")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
